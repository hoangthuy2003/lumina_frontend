import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ExamGeneratorService } from '../../../Services/exam-generator/exam-generator.service'; 
import { ChatPanelComponent } from './chat-panel/chat-panel.component';
import { PreviewPanelComponent } from './preview-panel/preview-panel.component';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-ai-chat',
  standalone: true,
  imports: [CommonModule, ChatPanelComponent, PreviewPanelComponent, FormsModule],
  templateUrl: './ai-chat.component.html',
  styleUrl: './ai-chat.component.scss'
})
export class AiChatComponent implements OnInit {
  messages: any[] = [];
  loading: boolean = false;
  previewData: any = null;

  constructor(private aiExamService: ExamGeneratorService) {}

  ngOnInit(): void {
    this.addAssistantMessage(
      'Xin ch√†o! üëã\n\n' +
      'T√¥i l√† tr·ª£ l√Ω AI TOEIC.\n\n' +
      'üí¨ B·∫°n c√≥ th·ªÉ:\n' +
      '‚Ä¢ T·∫°o ƒë·ªÅ: "T·∫°o 5 c√¢u Reading Part 5 v·ªÅ gi·ªõi t·ª´"\n' +
      '‚Ä¢ H·ªèi ƒë√°p: "L√†m th·∫ø n√†o ƒë·ªÉ h·ªçc TOEIC hi·ªáu qu·∫£?"\n' +
      '‚Ä¢ T∆∞ v·∫•n: "Gi·∫£i th√≠ch c√°ch d√πng gi·ªõi t·ª´ in, on, at"\n\n' +
      'H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn g√¨!'
    );
  }

  handleSendMessage(userRequest: string): void {
    this.addUserMessage(userRequest);
    
    // ‚úÖ Ph√°t hi·ªán xem c√≥ ph·∫£i l√† request t·∫°o ƒë·ªÅ kh√¥ng
    const isExamRequest = this.detectExamRequest(userRequest);
    
    // ‚úÖ Hi·ªÉn th·ªã loading message t∆∞∆°ng ·ª©ng
    if (isExamRequest) {
      this.addAssistantMessage('‚è≥ ƒêang t·∫°o ƒë·ªÅ, qu√° tr√¨nh c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian, vui l√≤ng ƒë·ª£i...');
    } else {
      this.addAssistantMessage('‚è≥ ƒêang ph·∫£n h·ªìi...');
    }
    
    this.handleSmartChat(userRequest);
  }

  handleSmartChat(userRequest: string): void {
    this.loading = true;

    this.aiExamService.smartChat(userRequest).subscribe({
      next: (response: any) => {
        console.log('Smart Chat Response:', response);
        this.removeLoadingMessage();
        
        if (response.type === 'exam') {
          // ===== TR∆Ø·ªúNG H·ª¢P T·∫†O ƒê·ªÄ THI =====
          this.previewData = response.data;
          
          this.addAssistantMessage(
            `‚úÖ **ƒê√£ t·∫°o xong!**\n\n` +
            `üìã ${response.examInfo.examTitle}\n` +
            `üéØ ${response.examInfo.skill} - ${response.examInfo.partLabel}\n` +
            `üìä ${response.examInfo.totalQuestions} c√¢u h·ªèi trong ${response.examInfo.promptCount} prompt\n\n` +
            `Xem chi ti·∫øt b√™n ph·∫£i ‚Üí`
          );
        } else {
          // ===== TR∆Ø·ªúNG H·ª¢P CHAT T·ª∞ DO =====
          this.addAssistantMessage(response.message);
        }
        
        this.loading = false;
      },
      error: (error: any) => {
        console.error('Error:', error);
        this.removeLoadingMessage();
        this.addAssistantMessage(
          `‚ùå L·ªói: ${error.error?.message || error.message}\n\n` +
          `Vui l√≤ng th·ª≠ l·∫°i!`
        );
        this.loading = false;
      }
    });
  }

  // ‚úÖ Ph√°t hi·ªán xem c√≥ ph·∫£i l√† request t·∫°o ƒë·ªÅ kh√¥ng (frontend check)
  private detectExamRequest(userRequest: string): boolean {
    const examKeywords = [
      't·∫°o', 'generate', 'gen', 'sinh',
      'c√¢u h·ªèi', 'ƒë·ªÅ thi', 'b√†i t·∫≠p',
      'reading part', 'listening part',
      'part 1', 'part 2', 'part 3', 'part 4', 'part 5', 'part 6', 'part 7'
    ];
    
    const lowerRequest = userRequest.toLowerCase();
    return examKeywords.some(keyword => lowerRequest.includes(keyword));
  }

  private addUserMessage(content: string): void {
    this.messages.push({ role: 'user', content });
  }

  private addAssistantMessage(content: string): void {
    this.messages.push({ role: 'assistant', content });
  }

  private removeLoadingMessage(): void {
    const lastMsg = this.messages[this.messages.length - 1];
    if (lastMsg?.content.includes('‚è≥')) {
      this.messages.pop();
    }
  }
}
